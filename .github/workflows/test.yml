name: Test Comic Cruncher

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        # Essential dependencies for PyQt6 and comic processing
        sudo apt-get install -y poppler-utils unrar
        # Updated OpenGL dependencies for newer Ubuntu
        sudo apt-get install -y libopengl0 libxcb-xinerama0
        sudo apt-get install -y xvfb  # Virtual display for GUI testing

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Use unar instead of unrar on macOS
        brew install poppler unar

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Note: Poppler needs to be installed manually on Windows
        # This workflow will test the Python dependencies only
        echo "Windows testing - Poppler installation skipped (manual step required)"

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Test core imports
      run: |
        python -c "
        print('Testing core dependencies...')
        import PyQt6.QtWidgets
        print('PyQt6: OK')
        import PIL
        print('Pillow: OK')
        try:
            import pdf2image
            print('pdf2image: OK')
        except Exception as e:
            print(f'pdf2image: {e} (Poppler may not be installed)')
        import rarfile
        print('rarfile: OK')
        print('Core dependency test completed.')
        "

    - name: Syntax validation
      run: |
        python -m py_compile comic_cruncher.py
        echo "Python syntax validation passed"

    - name: Test application imports
      run: |
        python -c "
        import os
        import sys
        
        # Prevent GUI from trying to display
        os.environ['QT_QPA_PLATFORM'] = 'offscreen'
        
        print('Testing application imports...')
        try:
            # Test importing main classes without instantiating GUI
            import comic_cruncher
            print('Main module imported successfully')
            
            # Test specific classes can be imported
            from comic_cruncher import ImageProcessor, format_file_size
            print('Utility classes imported successfully')
            
            print('Application import test completed successfully!')
        except ImportError as e:
            print(f'Import error: {e}')
            sys.exit(1)
        except Exception as e:
            print(f'Application import test completed with warnings: {e}')
            print('This is normal in CI environments without full GUI support')
        "

    - name: Test utility functions
      run: |
        python -c "
        from comic_cruncher import format_file_size, ImageProcessor
        
        # Test file size formatting
        assert format_file_size(0) == '0B'
        assert format_file_size(1024) == '1.0KB'
        assert format_file_size(1048576) == '1.0MB'
        print('Utility functions working correctly')
        
        print('All tests passed!')
        "

  lint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8
    
    - name: Lint with flake8
      run: |
        # Check for Python syntax errors and undefined names
        flake8 comic_cruncher.py --count --select=E9,F63,F7,F82 --show-source --statistics
        echo "No critical syntax errors found"
        
        # Check for style issues (non-blocking)
        echo "Checking code style (warnings only):"
        flake8 comic_cruncher.py --count --exit-zero --max-complexity=15 --max-line-length=100 --statistics || true

  compatibility-check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Check Python version compatibility
      run: |
        python --version
        echo "Testing minimum supported Python version (3.8+)"
        
        # Install only essential packages to test compatibility
        pip install PyQt6 Pillow
        
        # Basic compatibility test
        python -c "
        import sys
        print(f'Python version: {sys.version}')
        
        # Test that we can import without syntax errors
        with open('comic_cruncher.py', 'r') as f:
            code = f.read()
        
        try:
            compile(code, 'comic_cruncher.py', 'exec')
            print('Code is compatible with this Python version')
        except SyntaxError as e:
            print(f'Syntax error: {e}')
            sys.exit(1)
        "
