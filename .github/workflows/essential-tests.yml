name: Essential Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  syntax-check:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Syntax validation
      run: |
        echo "Testing Python ${{ matrix.python-version }} syntax compatibility"
        python -c "
        import sys
        print(f'Python version: {sys.version}')
        
        # Read and compile the main file
        with open('comic_cruncher.py', 'r', encoding='utf-8') as f:
            code = f.read()
        
        try:
            compile(code, 'comic_cruncher.py', 'exec')
            print('✓ Syntax check passed')
        except SyntaxError as e:
            print(f'✗ Syntax error: {e}')
            exit(1)
        "

    - name: Check project structure
      run: |
        echo "Checking project files..."
        for file in comic_cruncher.py requirements.txt README.md LICENSE; do
          if [ -f "$file" ]; then
            echo "✓ $file exists"
          else
            echo "✗ $file missing"
            exit 1
          fi
        done

    - name: Validate requirements.txt
      run: |
        echo "Checking requirements.txt format..."
        python -c "
        with open('requirements.txt', 'r') as f:
            lines = f.readlines()
        
        required_packages = ['PyQt6', 'Pillow', 'pdf2image', 'rarfile']
        found_packages = []
        
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#'):
                package = line.split('>=')[0].split('==')[0]
                found_packages.append(package)
        
        for pkg in required_packages:
            if pkg in found_packages:
                print(f'✓ {pkg} found in requirements')
            else:
                print(f'✗ {pkg} missing from requirements')
        
        print('Requirements validation completed')
        "

  basic-imports:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install minimal dependencies
      run: |
        python -m pip install --upgrade pip
        # Install only packages that don't require system dependencies
        pip install Pillow rarfile

    - name: Test basic Python functionality
      run: |
        python -c "
        # Test basic imports that should work anywhere
        import sys
        import os
        import zipfile
        import tempfile
        import shutil
        from pathlib import Path
        
        # Test installed packages
        try:
            from PIL import Image
            print('✓ Pillow import successful')
        except ImportError as e:
            print(f'✗ Pillow import failed: {e}')
        
        try:
            import rarfile
            print('✓ rarfile import successful')
        except ImportError as e:
            print(f'✗ rarfile import failed: {e}')
        
        print('Basic import test completed')
        "

    - name: Test utility functions extraction
      run: |
        python -c "
        # Extract and test utility functions from the main file
        with open('comic_cruncher.py', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # Extract the format_file_size function
        import re
        func_match = re.search(r'def format_file_size\(.*?\n(.*?)(?=\ndef|\nclass|\Z)', content, re.DOTALL)
        
        if func_match:
            print('✓ format_file_size function found')
            
            # Test the function logic manually
            def format_file_size(size_bytes):
                if size_bytes == 0:
                    return '0B'
                size_names = ['B', 'KB', 'MB', 'GB']
                i = 0
                while size_bytes >= 1024 and i < len(size_names) - 1:
                    size_bytes /= 1024.0
                    i += 1
                return f'{size_bytes:.1f}{size_names[i]}'
            
            # Test cases
            assert format_file_size(0) == '0B'
            assert format_file_size(1024) == '1.0KB'
            assert format_file_size(1048576) == '1.0MB'
            print('✓ Utility function logic test passed')
        else:
            print('✗ Could not extract format_file_size function')
        "

  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check README content
      run: |
        echo "Checking README.md content..."
        
        # Check for key sections
        if grep -q "Comic Cruncher" README.md; then
          echo "✓ Title found"
        else
          echo "✗ Title missing"
        fi
        
        if grep -q "Installation" README.md; then
          echo "✓ Installation section found"
        else
          echo "✗ Installation section missing"
        fi
        
        if grep -q "Usage" README.md; then
          echo "✓ Usage section found"
        else
          echo "✗ Usage section missing"
        fi
        
        echo "README validation completed"

    - name: Check LICENSE
      run: |
        echo "Checking LICENSE file..."
        if grep -q "MIT License" LICENSE; then
          echo "✓ MIT License detected"
        else
          echo "✗ License type unclear"
        fi
